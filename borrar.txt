// Interface
interface AnimalActions {
    void makeSound();
    void move();
}

// Clase Super
class Animal implements AnimalActions {
    protected String name;
    protected int age;

    // Constructor
    public Animal(String name, int age) {
        this.name = name;
        this.age = age;
    }

    // Método para mostrar información del animal
    public void displayInfo() {
        System.out.println("Animal: " + name + ", Age: " + age);
    }

    // Método sobreescrito de la interfaz
    @Override
    public void makeSound() {
        System.out.println("Animal makes a sound.");
    }

    // Método sobreescrito de la interfaz
    @Override
    public void move() {
        System.out.println("Animal moves.");
    }

    // Sobrecarga de método para diferentes comportamientos
    public void eat() {
        System.out.println("Animal is eating.");
    }

    public void eat(String food) {
        System.out.println("Animal is eating " + food + ".");
    }
}

// Clase Hija 1
class Dog extends Animal {

    // Constructor
    public Dog(String name, int age) {
        super(name, age);
    }

    // Sobreescritura de métodos
    @Override
    public void makeSound() {
        System.out.println(name + " says: Woof!");
    }

    @Override
    public void move() {
        System.out.println(name + " is running.");
    }
}

// Clase Hija 2
class Cat extends Animal {

    // Constructor
    public Cat(String name, int age) {
        super(name, age);
    }

    // Sobreescritura de métodos
    @Override
    public void makeSound() {
        System.out.println(name + " says: Meow!");
    }

    @Override
    public void move() {
        System.out.println(name + " is sneaking.");
    }
}

// Clase principal
public class Main {
    public static void main(String[] args) {
        // Creación de objetos individuales sin ArrayList
        Animal myDog = new Dog("Buddy", 3);
        Animal myCat = new Cat("Whiskers", 2);

        // Polimorfismo - llamar a métodos sobrescritos
        myDog.displayInfo();
        myDog.makeSound();
        myDog.move();
        myDog.eat();
        myDog.eat("dog food");
        
        System.out.println(); // Separador
        
        myCat.displayInfo();
        myCat.makeSound();
        myCat.move();
        myCat.eat();
        myCat.eat("fish");

        // Manejo de excepciones
        try {
            // Forzar una excepción
            String animalName = null;
            System.out.println(animalName.length()); // Esto lanzará NullPointerException
        } catch (NullPointerException e) {
            System.out.println("Error: Intentaste acceder a una propiedad de un objeto nulo.");
        }
    }
}